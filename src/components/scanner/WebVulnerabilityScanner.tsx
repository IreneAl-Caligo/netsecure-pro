
import { useState, useEffect } from "react";
import { Shield, ShieldAlert, AlertCircle, ExternalLink, RefreshCw, Key, CheckCircle, Settings } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/components/ui/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ApiKeyConfig } from "./ApiKeyConfig";
import { scannerApi } from "@/services/ScannerApiService";
import { vulnerabilityScannerAPIs } from "@/config/scannerConfig";

interface Vulnerability {
  severity: "Critical" | "High" | "Medium" | "Low" | "Info";
  issue: string;
  description: string;
  recommendation: string;
  cve?: string;
  cvss?: number;
  affectedComponents?: string[];
}

interface WebVulnerabilityScannerProps {
  hasApiKey?: boolean;
}

export function WebVulnerabilityScanner({ hasApiKey }: WebVulnerabilityScannerProps) {
  const [url, setUrl] = useState("");
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<Vulnerability[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [advancedScan, setAdvancedScan] = useState(false);
  const [showApiConfig, setShowApiConfig] = useState(false);
  const [selectedProvider, setSelectedProvider] = useState("");
  const { toast } = useToast();
  
  const apiKey = scannerApi.getApiKey('vulnerability');
  const apiProvider = scannerApi.getApiProvider('vulnerability');

  useEffect(() => {
    const currentApiKey = scannerApi.getApiKey('vulnerability');
    const currentProvider = scannerApi.getApiProvider('vulnerability');
    
    if (currentProvider) {
      setSelectedProvider(currentProvider);
    } else if (vulnerabilityScannerAPIs.length > 0) {
      setSelectedProvider(vulnerabilityScannerAPIs[0].name);
    }
    
    if (!currentApiKey && hasApiKey === false) {
      toast({
        title: "API Key Required",
        description: "Please configure an API key for the vulnerability scanner",
        variant: "destructive",
      });
    }
  }, [hasApiKey, toast]);

  const startScan = async () => {
    if (!url || !url.match(/^(http|https):\/\/[a-zA-Z0-9-_.]+\.[a-zA-Z]{2,}(\/.*)?$/)) {
      toast({
        title: "Error",
        description: "Please enter a valid URL (e.g., https://example.com)",
        variant: "destructive",
      });
      return;
    }

    if (!apiKey) {
      toast({
        title: "API Key Required",
        description: "Please configure an API key for the vulnerability scanner",
        variant: "destructive",
      });
      setShowApiConfig(true);
      return;
    }

    let progressInterval: ReturnType<typeof setInterval> | null = null;

    try {
      setScanning(true);
      setProgress(0);
      setResults([]);
      setError(null);

      toast({
        title: "Scan Started",
        description: `Starting vulnerability scan using ${apiProvider || selectedProvider || "default provider"}. This may take several minutes.`,
      });

      progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 95) {
            if (progressInterval) {
              clearInterval(progressInterval);
            }
            return 95;
          }
          return prev + (Math.random() * 2);
        });
      }, 1000);

      try {
        const scanOptions = {
          fullScan: advancedScan,
          includeCookies: true,
          detectXSS: true,
          detectSQLi: true,
          detectCSRF: true,
          provider: selectedProvider || apiProvider
        };
        
        const scanResults = await scannerApi.scanForVulnerabilities(url, scanOptions);
        
        if (progressInterval) {
          clearInterval(progressInterval);
          progressInterval = null;
        }
        setProgress(100);
        
        if (scanResults && scanResults.vulnerabilities) {
          setResults(scanResults.vulnerabilities);
          
          if (scanResults.message) {
            if (scanResults.vulnerabilities.length === 0) {
              toast({
                title: "Scan Complete",
                description: scanResults.message || "No vulnerabilities found",
              });
            } else {
              toast({
                title: "Scan Complete",
                description: `Found ${scanResults.vulnerabilities.length} vulnerabilities`,
              });
            }
          } else {
            toast({
              title: "Scan Complete",
              description: `Found ${scanResults.vulnerabilities.length} vulnerabilities`,
            });
          }
        } else if (scanResults && scanResults.error) {
          throw new Error(scanResults.error);
        } else {
          throw new Error('Invalid response from scan service');
        }
      } catch (apiError: any) {
        console.error('API Error:', apiError);
        
        if (progressInterval) {
          clearInterval(progressInterval);
          progressInterval = null;
        }
        
        setProgress(100);
        
        if (apiError.message?.includes('API key')) {
          setError("Invalid or expired API key. Please configure your API key in the settings.");
          setShowApiConfig(true);
        } else {
          setError(`Scan error: ${apiError.message || 'Unknown error'}`);
        }
        
        toast({
          title: "Error",
          description: apiError.message || "An error occurred during the scan",
          variant: "destructive",
        });
      }
    } catch (err: any) {
      console.error("Error during vulnerability scan:", err);
      if (progressInterval) {
        clearInterval(progressInterval);
        progressInterval = null;
      }
      setScanning(false);
      
      setProgress(0);
      
      if (!error) {
        setError("An error occurred during the scan. Please check your API configuration and try again.");
      }
      
      toast({
        title: "Error",
        description: err.message || "An unexpected error occurred during the scan",
        variant: "destructive",
      });
    } finally {
      setScanning(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical": return "text-red-600 bg-red-100 dark:bg-red-900/30 dark:text-red-300";
      case "High": return "text-orange-600 bg-orange-100 dark:bg-orange-900/30 dark:text-orange-300";
      case "Medium": return "text-yellow-600 bg-yellow-100 dark:bg-yellow-900/30 dark:text-yellow-300";
      case "Low": return "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300";
      default: return "text-gray-600 bg-gray-100 dark:bg-gray-900/30 dark:text-gray-300";
    }
  };

  const handleProviderChange = (providerName: string) => {
    setSelectedProvider(providerName);
    
    if (apiKey) {
      scannerApi.setApiKey('vulnerability', apiKey, providerName);
      toast({
        title: "Provider Updated",
        description: `Now using ${providerName} for vulnerability scanning`
      });
    }
  };

  return (
    <div className="animate-fade-in space-y-6">
      <div className="flex items-center space-x-2">
        <Shield className="h-6 w-6 text-primary" />
        <h2 className="text-2xl font-bold">Web Vulnerability Scanner</h2>
      </div>
      
      {showApiConfig ? (
        <div className="space-y-4">
          <ApiKeyConfig 
            scannerType="vulnerability" 
            isVisible={true} 
            onDone={() => setShowApiConfig(false)} 
          />
          <Button 
            variant="outline" 
            onClick={() => setShowApiConfig(false)}
            className="w-full"
          >
            Back to Scanner
          </Button>
        </div>
      ) : (
        <>
          <Card className="backdrop-blur-sm bg-card/80 border-border/50">
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Target Configuration</span>
                {apiKey ? (
                  <Badge variant="secondary" className="flex items-center gap-1">
                    <CheckCircle className="h-3 w-3" />
                    Using {apiProvider || "Default API"}
                  </Badge>
                ) : (
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => setShowApiConfig(true)}
                    className="flex items-center gap-1 text-xs"
                  >
                    <Key className="h-3 w-3" />
                    Configure API
                  </Button>
                )}
              </CardTitle>
              <CardDescription>Enter the website URL you want to scan for vulnerabilities</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">API Provider</label>
                <Select value={selectedProvider} onValueChange={handleProviderChange}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select a provider" />
                  </SelectTrigger>
                  <SelectContent>
                    {vulnerabilityScannerAPIs.map((provider) => (
                      <SelectItem key={provider.name} value={provider.name}>
                        {provider.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <p className="text-xs text-muted-foreground">
                  Select the vulnerability scanning service to use for this scan
                </p>
              </div>

              <div className="space-y-2">
                <Input
                  placeholder="https://example.com"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                  className="border-border/50 focus:border-primary"
                  disabled={scanning}
                />
                <p className="text-xs text-muted-foreground">
                  Note: Only scan websites you own or have explicit permission to test. Unauthorized scanning may be illegal.
                </p>
              </div>
              
              <div className="flex flex-col space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4 pt-2">
                <div className="flex items-center space-x-2">
                  <Switch
                    id="advanced-scan"
                    checked={advancedScan}
                    onCheckedChange={setAdvancedScan}
                    disabled={scanning}
                  />
                  <Label htmlFor="advanced-scan">Advanced Scan (Slower, more thorough)</Label>
                </div>
              </div>
              
              {scanning && (
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Scanning in progress...</span>
                    <span>{Math.round(progress)}%</span>
                  </div>
                  <Progress value={progress} className="h-2" />
                </div>
              )}
            </CardContent>
            <CardFooter className="flex flex-col sm:flex-row gap-4">
              <Button 
                variant="outline" 
                onClick={() => setShowApiConfig(true)} 
                className="w-full sm:w-auto"
              >
                API Settings
              </Button>
              <Button 
                onClick={startScan} 
                disabled={scanning} 
                className="w-full sm:w-auto flex-1"
              >
                {scanning ? "Scanning..." : "Start Scan"}
              </Button>
            </CardFooter>
          </Card>
          
          {error && (
            <div className="text-sm p-3 bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300 rounded-md">
              <AlertCircle className="h-4 w-4 inline mr-2" />
              {error}
            </div>
          )}
          
          {results.length > 0 && (
            <Card className="backdrop-blur-sm bg-card/80 border-border/50 animate-slide-in">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <ShieldAlert className="h-5 w-5 text-destructive" />
                  Vulnerability Scan Results
                </CardTitle>
                <CardDescription>
                  {results.length} issues found during the scan of {url}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="all">
                  <TabsList className="mb-4">
                    <TabsTrigger value="all">All Issues</TabsTrigger>
                    <TabsTrigger value="critical">Critical</TabsTrigger>
                    <TabsTrigger value="high">High</TabsTrigger>
                    <TabsTrigger value="medium">Medium</TabsTrigger>
                    <TabsTrigger value="low">Low</TabsTrigger>
                  </TabsList>
                  
                  {["all", "critical", "high", "medium", "low"].map((tab) => (
                    <TabsContent key={tab} value={tab}>
                      <div className="space-y-4">
                        {results
                          .filter(
                            (vuln) =>
                              tab === "all" ||
                              vuln.severity.toLowerCase() === tab
                          )
                          .map((vuln, idx) => (
                            <div
                              key={idx}
                              className="border rounded-lg p-4 bg-card shadow-sm"
                            >
                              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-2">
                                <div className="flex items-center gap-2">
                                  <span
                                    className={`px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(
                                      vuln.severity
                                    )}`}
                                  >
                                    {vuln.severity}
                                  </span>
                                  <h3 className="font-semibold">{vuln.issue}</h3>
                                </div>
                                
                                {vuln.cvss && (
                                  <div className="text-sm bg-black/5 dark:bg-white/5 px-2 py-1 rounded">
                                    CVSS: {vuln.cvss.toFixed(1)}
                                  </div>
                                )}
                              </div>
                              
                              <div className="mb-3 text-sm">
                                <p>{vuln.description}</p>
                              </div>
                              
                              {vuln.affectedComponents && vuln.affectedComponents.length > 0 && (
                                <div className="mb-3">
                                  <div className="text-sm font-medium mb-1">Affected Components:</div>
                                  <div className="flex flex-wrap gap-1">
                                    {vuln.affectedComponents.map((comp, i) => (
                                      <span 
                                        key={i} 
                                        className="text-xs px-2 py-1 bg-muted rounded-md"
                                      >
                                        {comp}
                                      </span>
                                    ))}
                                  </div>
                                </div>
                              )}
                              
                              <div className="bg-muted/50 rounded-md p-3 text-sm">
                                <div className="font-medium mb-1">Recommendation:</div>
                                <p>{vuln.recommendation}</p>
                              </div>
                              
                              {vuln.cve && (
                                <div className="mt-3 flex items-center text-xs text-muted-foreground">
                                  <span className="mr-1">CVE:</span>
                                  <a 
                                    href={`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vuln.cve}`}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="flex items-center hover:text-primary"
                                  >
                                    {vuln.cve}
                                    <ExternalLink className="h-3 w-3 ml-1" />
                                  </a>
                                </div>
                              )}
                            </div>
                          ))}
                        
                        {results.filter(
                          (vuln) =>
                            tab === "all" || vuln.severity.toLowerCase() === tab
                        ).length === 0 && (
                          <div className="text-center py-8 text-muted-foreground">
                            <AlertCircle className="mx-auto h-12 w-12 mb-4 opacity-20" />
                            <p>No {tab} severity issues found</p>
                          </div>
                        )}
                      </div>
                    </TabsContent>
                  ))}
                </Tabs>
              </CardContent>
            </Card>
          )}
        </>
      )}
    </div>
  );
}
