
import { useState } from "react";
import { Shield, ShieldAlert, AlertCircle, ExternalLink } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/components/ui/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface Vulnerability {
  severity: "Critical" | "High" | "Medium" | "Low" | "Info";
  issue: string;
  description: string;
  recommendation: string;
  cve?: string;
  cvss?: number;
  affectedComponents?: string[];
}

export function WebVulnerabilityScanner() {
  const [url, setUrl] = useState("");
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<Vulnerability[]>([]);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const startScan = async () => {
    if (!url || !url.match(/^(http|https):\/\/[a-zA-Z0-9-_.]+\.[a-zA-Z]{2,}(\/.*)?$/)) {
      toast({
        title: "Error",
        description: "Please enter a valid URL (e.g., https://example.com)",
        variant: "destructive",
      });
      return;
    }

    try {
      setScanning(true);
      setProgress(0);
      setResults([]);
      setError(null);

      // Inform the user that the scan is starting
      toast({
        title: "Scan Started",
        description: "Starting vulnerability scan. This may take several minutes.",
      });

      // Start the progress animation
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 95) {
            clearInterval(progressInterval);
            return 95;
          }
          return prev + (Math.random() * 5);
        });
      }, 1000);

      // Make a real API call to a vulnerability scanning service
      // Note: This is where you would integrate with a real scanning API
      // For demonstration, we'll use a fetch call that would connect to a hypothetical API
      try {
        const response = await fetch(`/api/vulnerability-scan?url=${encodeURIComponent(url)}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            url: url,
            scanOptions: {
              fullScan: true,
              includeCookies: true,
              detectXSS: true,
              detectSQLi: true,
              detectCSRF: true,
            }
          })
        });
        
        // Error handling for the real-world scenario
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Network error during vulnerability scan');
        }

        clearInterval(progressInterval);
        setProgress(100);
        
        // Process real results
        const scanData = await response.json();
        if (scanData.vulnerabilities && Array.isArray(scanData.vulnerabilities)) {
          setResults(scanData.vulnerabilities);
        } else {
          console.error('Invalid response format from vulnerability scan API', scanData);
          throw new Error('Invalid response from scan service');
        }
      } catch (apiError) {
        console.error('API Error:', apiError);
        
        // Since we don't have a real backend, fallback to educational vulnerabilities
        // This would be removed when connected to a real scanning service
        clearInterval(progressInterval);
        setProgress(100);
        
        // Educational data about common vulnerabilities
        setResults([
          {
            severity: "High",
            issue: "Cross-Site Scripting (XSS)",
            description: "XSS vulnerabilities occur when an application includes untrusted data in a new web page without proper validation or escaping. This allows attackers to execute scripts in the victim's browser.",
            recommendation: "Implement Content Security Policy (CSP), use context-sensitive escaping like HTML entity encoding, validate and sanitize user input, and use modern frameworks that automatically escape output.",
            cve: "CVE-2021-44228",
            cvss: 8.8,
            affectedComponents: ["Login form", "Comment section", "Search functionality"]
          },
          {
            severity: "Medium",
            issue: "Insecure SSL/TLS Configuration",
            description: "The website uses outdated SSL/TLS protocols or cipher suites that have known vulnerabilities, potentially exposing encrypted communications to interception.",
            recommendation: "Upgrade to TLS 1.3, disable older TLS versions (1.0, 1.1) and SSL, use strong cipher suites, and implement HSTS (HTTP Strict Transport Security).",
            cvss: 6.5,
            affectedComponents: ["Web server configuration"]
          },
          {
            severity: "Critical",
            issue: "SQL Injection",
            description: "SQL injection vulnerabilities allow attackers to insert malicious SQL statements that can read sensitive data, modify database data, execute administrative operations, or in some cases issue commands to the operating system.",
            recommendation: "Use parameterized queries or prepared statements, implement an ORM (Object Relational Mapping), validate input and apply input sanitization, and use the principle of least privilege for database accounts.",
            cvss: 9.8,
            affectedComponents: ["User authentication", "Product search"]
          },
          {
            severity: "Low",
            issue: "Missing Security Headers",
            description: "The website is missing important HTTP security headers that help protect against various attacks like clickjacking, XSS, and data injection.",
            recommendation: "Implement headers such as Content-Security-Policy, X-Content-Type-Options, X-Frame-Options, Strict-Transport-Security, and Referrer-Policy.",
            cvss: 3.7,
            affectedComponents: ["HTTP response headers"]
          },
          {
            severity: "Medium",
            issue: "Cross-Site Request Forgery (CSRF)",
            description: "CSRF attacks force authenticated users to execute unwanted actions on a web application in which they're currently authenticated, by tricking them into submitting a malicious request.",
            recommendation: "Implement anti-CSRF tokens in forms, use SameSite cookie attribute, verify Origin and Referer headers, and require re-authentication for sensitive operations.",
            cvss: 6.4,
            affectedComponents: ["Form submissions", "Account settings"]
          }
        ]);
        
        setError("Unable to connect to vulnerability scanning service. Displaying educational vulnerability information instead.");
        
        toast({
          title: "Connection Error",
          description: "Could not connect to the vulnerability scanning service. Showing example vulnerabilities instead.",
          variant: "destructive",
        });
      }
    } catch (err) {
      console.error("Error during vulnerability scan:", err);
      setScanning(false);
      setError("An unexpected error occurred during the scan. Please try again later.");
      toast({
        title: "Error",
        description: "An unexpected error occurred",
        variant: "destructive",
      });
    } finally {
      setScanning(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical": return "text-red-600 bg-red-100 dark:bg-red-900/30 dark:text-red-300";
      case "High": return "text-orange-600 bg-orange-100 dark:bg-orange-900/30 dark:text-orange-300";
      case "Medium": return "text-yellow-600 bg-yellow-100 dark:bg-yellow-900/30 dark:text-yellow-300";
      case "Low": return "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300";
      default: return "text-gray-600 bg-gray-100 dark:bg-gray-900/30 dark:text-gray-300";
    }
  };

  return (
    <div className="animate-fade-in space-y-6">
      <div className="flex items-center space-x-2">
        <Shield className="h-6 w-6 text-primary" />
        <h2 className="text-2xl font-bold">Web Vulnerability Scanner</h2>
      </div>
      
      <Card className="backdrop-blur-sm bg-card/80 border-border/50">
        <CardHeader>
          <CardTitle>Target Configuration</CardTitle>
          <CardDescription>Enter the website URL you want to scan for vulnerabilities</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Input
              placeholder="https://example.com"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              className="border-border/50 focus:border-primary"
              disabled={scanning}
            />
            <p className="text-xs text-muted-foreground">
              Note: Only scan websites you own or have explicit permission to test. Unauthorized scanning may be illegal.
            </p>
          </div>
          
          {scanning && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Scanning in progress...</span>
                <span>{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>
          )}
        </CardContent>
        <CardFooter>
          <Button 
            onClick={startScan} 
            disabled={scanning} 
            className="w-full"
          >
            {scanning ? "Scanning..." : "Start Scan"}
          </Button>
        </CardFooter>
      </Card>
      
      {error && (
        <div className="text-sm p-3 bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300 rounded-md">
          <AlertCircle className="h-4 w-4 inline mr-2" />
          {error}
        </div>
      )}
      
      {results.length > 0 && (
        <Card className="backdrop-blur-sm bg-card/80 border-border/50 animate-slide-in">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ShieldAlert className="h-5 w-5 text-destructive" />
              Vulnerability Scan Results
            </CardTitle>
            <CardDescription>
              {results.length} issues found during the scan of {url}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="all">
              <TabsList className="mb-4">
                <TabsTrigger value="all">All Issues</TabsTrigger>
                <TabsTrigger value="critical">Critical</TabsTrigger>
                <TabsTrigger value="high">High</TabsTrigger>
                <TabsTrigger value="medium">Medium</TabsTrigger>
                <TabsTrigger value="low">Low</TabsTrigger>
              </TabsList>
              
              {["all", "critical", "high", "medium", "low"].map((tab) => (
                <TabsContent key={tab} value={tab} className="space-y-4">
                  {results
                    .filter(result => tab === "all" || result.severity.toLowerCase() === tab)
                    .map((result, index) => (
                      <div key={index} className="p-4 rounded-lg border border-border/50 bg-background/50">
                        <div className="flex items-start gap-3">
                          <div className="min-w-5 mt-0.5">
                            <AlertCircle className={`h-5 w-5 ${
                              result.severity === "Critical" ? "text-red-600" : 
                              result.severity === "High" ? "text-orange-600" : 
                              result.severity === "Medium" ? "text-yellow-600" : 
                              "text-blue-600"
                            }`} />
                          </div>
                          <div className="space-y-3 flex-1">
                            <div className="flex justify-between">
                              <h4 className="font-medium">{result.issue}</h4>
                              <span className={`text-xs px-2 py-0.5 rounded-full ${getSeverityColor(result.severity)}`}>
                                {result.severity}
                                {result.cvss && ` (${result.cvss})`}
                              </span>
                            </div>
                            
                            <div className="space-y-2 text-sm">
                              <p className="text-muted-foreground">{result.description}</p>
                              
                              {result.cve && (
                                <div className="flex items-center gap-1 text-xs">
                                  <span className="font-semibold">CVE:</span>
                                  <a 
                                    href={`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${result.cve}`} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="text-primary flex items-center gap-1 hover:underline"
                                  >
                                    {result.cve} <ExternalLink className="h-3 w-3" />
                                  </a>
                                </div>
                              )}
                              
                              {result.affectedComponents && (
                                <div className="flex flex-wrap gap-1 mt-1">
                                  {result.affectedComponents.map((component, idx) => (
                                    <span 
                                      key={idx} 
                                      className="text-xs px-2 py-0.5 bg-secondary text-secondary-foreground rounded-full"
                                    >
                                      {component}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                            
                            <div className="mt-3 pt-3 border-t border-border/40">
                              <h5 className="font-medium text-sm mb-1">How to Fix:</h5>
                              <p className="text-sm">{result.recommendation}</p>
                            </div>
                          </div>
                        </div>
                      </div>
                  ))}
                </TabsContent>
              ))}
            </Tabs>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
