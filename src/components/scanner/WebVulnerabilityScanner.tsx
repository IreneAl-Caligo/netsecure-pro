
import { useState } from "react";
import { Shield, ShieldAlert, Check, AlertCircle } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/components/ui/use-toast";

export function WebVulnerabilityScanner() {
  const [url, setUrl] = useState("");
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<Array<{severity: string; issue: string; recommendation: string}>>([]);
  const { toast } = useToast();

  const startScan = () => {
    if (!url) {
      toast({
        title: "Error",
        description: "Please enter a valid URL",
        variant: "destructive",
      });
      return;
    }

    setScanning(true);
    setProgress(0);
    setResults([]);

    // Simulate scanning process
    const interval = setInterval(() => {
      setProgress((prev) => {
        const newProgress = prev + Math.random() * 15;
        if (newProgress >= 100) {
          clearInterval(interval);
          setScanning(false);
          
          // Simulate results
          setResults([
            {
              severity: "High",
              issue: "Cross-Site Scripting (XSS) Vulnerability",
              recommendation: "Implement content security policy and input validation"
            },
            {
              severity: "Medium",
              issue: "Outdated SSL/TLS Version",
              recommendation: "Update to TLS 1.3 for improved security"
            },
            {
              severity: "Low",
              issue: "Missing Security Headers",
              recommendation: "Add X-Content-Type-Options and X-Frame-Options headers"
            }
          ]);
          
          toast({
            title: "Scan Complete",
            description: "Web vulnerability scan has been completed.",
          });
          
          return 100;
        }
        return newProgress;
      });
    }, 500);
  };

  return (
    <div className="animate-fade-in space-y-6">
      <div className="flex items-center space-x-2">
        <Shield className="h-6 w-6 text-primary" />
        <h2 className="text-2xl font-bold">Web Vulnerability Scanner</h2>
      </div>
      
      <Card className="backdrop-blur-sm bg-card/80 border-border/50">
        <CardHeader>
          <CardTitle>Target Configuration</CardTitle>
          <CardDescription>Enter the website URL you want to scan for vulnerabilities</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Input
              placeholder="https://example.com"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              className="border-border/50 focus:border-primary"
              disabled={scanning}
            />
          </div>
          
          {scanning && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Scanning in progress...</span>
                <span>{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>
          )}
        </CardContent>
        <CardFooter>
          <Button 
            onClick={startScan} 
            disabled={scanning} 
            className="w-full"
          >
            {scanning ? "Scanning..." : "Start Scan"}
          </Button>
        </CardFooter>
      </Card>
      
      {results.length > 0 && (
        <Card className="backdrop-blur-sm bg-card/80 border-border/50 animate-slide-in">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ShieldAlert className="h-5 w-5 text-destructive" />
              Vulnerability Scan Results
            </CardTitle>
            <CardDescription>
              {results.length} issues found during the scan
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {results.map((result, index) => (
                <div key={index} className="p-4 rounded-lg border border-border/50 bg-background/50">
                  <div className="flex items-start gap-3">
                    <div className={`min-w-5 mt-0.5 ${
                      result.severity === "High" ? "text-destructive" : 
                      result.severity === "Medium" ? "text-orange-500" : "text-yellow-500"
                    }`}>
                      <AlertCircle className="h-5 w-5" />
                    </div>
                    <div className="space-y-1 flex-1">
                      <div className="flex justify-between">
                        <h4 className="font-medium">{result.issue}</h4>
                        <span className={`text-xs px-2 py-0.5 rounded-full ${
                          result.severity === "High" ? "bg-destructive/10 text-destructive" : 
                          result.severity === "Medium" ? "bg-orange-500/10 text-orange-500" : 
                          "bg-yellow-500/10 text-yellow-500"
                        }`}>
                          {result.severity}
                        </span>
                      </div>
                      <p className="text-sm text-muted-foreground">{result.recommendation}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
